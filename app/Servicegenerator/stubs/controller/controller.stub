<?php

namespace App\Http\Controllers\Api\V1;

use App\Actions\Identifier;
use App\Helpers\Helper;
use App\Http\Controllers\Api\ApiController;
use App\Http\Requests\{{PLURAL_NAME}}\CreateRequest;
use App\Http\Requests\{{PLURAL_NAME}}\UpdateRequest;
use App\Http\Resources\{{PLURAL_NAME}}\{{CLASS_NAME}}Resource;
use App\Http\Resources\{{PLURAL_NAME}}\{{CLASS_NAME}}Resources;
use App\Http\Resources\{{PLURAL_NAME}}\{{CLASS_NAME}}ResourcesCollection;
use App\Services\{{CLASS_NAME}}Service;
use Illuminate\Http\Request;
use Illuminate\Support\Arr;

class AdminController extends ApiController
{

    public function __init__()
    {
        $this->service = new {{CLASS_NAME}}Service();
    }

    /**
     * [Description for index]
     *
     * @param Request $request
     *
     * @return [type]
     *
     */
    public function index(Request $request)
    {
        try {

            $this->authorized("index")->setMessage();

            ${{LOWER_PLURAL_NAME}}=$this->service->index(
                [
                "filters"  =>  $request->query()?Arr::only($request->query(),['trashed']):[]
                ],
                true,
                50,
                $request->query("page")
            );
            return $this->respond(new {{CLASS_NAME}}ResourcesCollection(${{LOWER_PLURAL_NAME}}));

        } catch ( \Exception $exception) {
             return $this->exceptionRespond($exception);
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(CreateRequest $request)
    {
        try {
            return $this->authorized("store")->setMessage()
            ->respond(new {{CLASS_NAME}}Resource($this->dispatchService->store($request->all())));
         } catch ( \Exception $exception) {
             return $this->exceptionRespond($exception);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\{{CLASS_NAME}}  ${{NAME}}
     * @return \Illuminate\Http\Response
     */
    public function show(Identifier ${{NAME}}, $filters=[])
    {
        try {
            return $this->authorized("show")->setMessage()
            ->respond(new {{CLASS_NAME}}Resource($this->service->show(${{NAME}})));
         } catch ( \Exception $exception) {
             return $this->exceptionRespond($exception);
        }
    }

    /**
     * [Description for update]
     *
     * @param UpdateRequest $request
     * @param mixed $id
     *
     * @return [type]
     *
     */
    public function update(UpdateRequest $request, Identifier ${{NAME}})
    {
        try {
            return $this->authorized("update")->setMessage()
            ->respond(new {{CLASS_NAME}}Resource($this->dispatchService->update(${{NAME}},$request->all())));
         } catch ( \Exception $exception) {
             return $this->exceptionRespond($exception);
        }
    }

}
